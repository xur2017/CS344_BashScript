
#!/bin/bash

#CS344 Program1
#A simple bash script to perform a few common matrix operations
#Rui Xu

temp1="temp1"
temp2="temp2"
temp3="temp3"

#trap signal
trap "rm -f $temp1 $temp2 $temp3; echo 'program terminated'; exit 1" INT HUP TERM

#function to compute matrix dimensions
dims()
{
	rows=$(cat $1 | wc -l)
	cols=$(($(cat $1 | wc -w)/rows))
	echo "$rows $cols"
}

#function to transpose matrix
#extract each column, then echo it as row
transpose()
{
	rows=$(cat $1 | wc -l)
	cols=$(($(cat $1 | wc -w)/rows))
	for (( i=1; i<=cols; i++ )); do
		cut -f $i $1 > $temp2
		j=0
		while read line; do
			j=$((j+1))
			if [ "$j" -lt "$rows" ]; then
				echo -e -n "$line\t" >> $temp3
			else
				echo -e -n "$line" >> $temp3
			fi
		done < "$temp2"
		echo >> $temp3
	done
	cat $temp3
	rm $temp2
	rm $temp3
}

#function to compute matrix mean
#extract each column, then average it
mean()
{
	rows=$(cat $1 | wc -l)
	cols=$(($(cat $1 | wc -w)/rows))
	for (( i=1; i<=cols; i++ )); do
		count=0
		sum=0
		cut -f $i $1 > $temp2
		while read line
		do
			sum=$((sum+line))
			count=$((count+1))
		done < $temp2
		mean=$(((sum + (count/2)*( (sum>0)*2-1 )) / count))
		if [ "$i" -lt "$cols" ]; then
			echo -e -n "$mean\t" >> $temp3
		else
			echo -e -n "$mean" >> $temp3
		fi
	done
	echo >> $temp3
	cat $temp3
	rm $temp2
	rm $temp3
}

#function to add two matrices
#perform computation according to matrix addition definition and through for-loop
add()
{
	rows=$(cat $1 | wc -l)
	cols=$(($(cat $1 | wc -w)/rows))
	i=0;
	for j in $(cat $1); do
		arr[$i]=$j
		i=$((i+1))
	done
	
	i=0;
	for j in $(cat $2); do
		arr[$i]=$((j+arr[i]))
		i=$((i+1))
	done
	
	i=0
	for (( j=1; j<=rows; j++ )); do
		for (( k=1; k<=cols; k++ )); do
			if [ "$k" -lt "$cols" ]; then
				echo -e -n "${arr[$i]}\t" >> $temp2
			else
				echo -e -n "${arr[$i]}" >> $temp2
			fi
			i=$((i+1))
		done
		echo >> $temp2
	done
	cat $temp2
	rm temp2
}

#function to multiply two matrices
#perform computation according to matrix multiplication definition and through nested for-loop
multiply()
{
	rows1=$(cat $1 | wc -l)
	cols1=$(($(cat $1 | wc -w)/rows1))
	rows2=$(cat $2 | wc -l)
	cols2=$(($(cat $2 | wc -w)/rows2))
	
	i=0;
	for j in $(cat $1); do
		arr1[$i]=$j
		i=$((i+1))
	done
	
	i=0
	j=1
	while [ $j -le $cols2 ]; do
		for k in $(cut -f $j $2); do
			arr2[$i]=$k
			i=$((i+1))
		done
		j=$((j+1))
	done
	
	for ((i=0; i<rows1; i++)); do
		for ((j=0; j<cols2; j++)); do
			sum=0
			for((k=0; k<rows2; k++)); do
			ind1=$((rows2*i+k ))
			ind2=$((rows2*j+k ))
			num=$(( arr1[ind1]*arr2[ind2]))
			sum=$((sum+num))
			done
			if [ "$j" -lt "$((cols2-1))" ]; then
				echo -e -n "$sum\t" >> $temp2
			else
				echo -e -n "$sum" >> $temp2
			fi
		done
			echo >> $temp2
	done
	cat $temp2
	rm temp2
}



#main script:
#conditional statements (if..elif..else..fi) to parse user input command
#matrix dims [MATRIX]:
if [ $1 == "dims" ] && [ $# == "2" ] && [ -r "$2" ]; then
	dims $2
elif [ $1 == "dims" ] && [ $# == "1" ]; then
	while read line; do
		echo "$line" >> $temp1
	done
	dims $temp1
	rm $temp1
#matrix transpose [MATRIX]:
elif [ $1 == "transpose" ] && [ $# == "2" ] && [ -r "$2" ]; then
	transpose $2
elif [ $1 == "transpose" ] && [ $# == "1" ]; then
	while read line; do
		echo "$line" >> $temp1
	done
	transpose $temp1
	rm $temp1	
#matrix mean [MATRIX]:
elif [ $1 == "mean" ] && [ $# == "2" ] && [ -r "$2" ]; then
	mean $2
elif [ $1 == "mean" ] && [ $# == "1" ]; then
	while read line; do
		echo "$line" >> $temp1
	done
	mean $temp1
	rm $temp1
#matrix add MATRIX_LEFT MATRIX_RIGHT (also validate matrix dimensions):
elif [ $1 == "add" ] && [ $# == "3" ] && [ -r "$2" ] && [ -r "$3" ]; then
	rows1=$(cat $2 | wc -l)
	cols1=$(($(cat $2 | wc -w)/rows1))
	rows2=$(cat $3 | wc -l)
	cols2=$(($(cat $3 | wc -w)/rows2))
	if [ $rows1 == $rows2 ] && [ $cols1 == $cols2 ]; then
		add $2 $3
	else
		echo "invalid matirx dimensions" >&2
		exit 5
	fi
#matrix multiply MATRIX_LEFT MATRIX_RIGHT (also validate matrix dimensions):
elif [ $1 == "multiply" ] && [ $# == "3" ] && [ -r "$2" ] && [ -r "$3" ]; then
	rows1=$(cat $2 | wc -l)
	cols1=$(($(cat $2 | wc -w)/rows1))
	rows2=$(cat $3 | wc -l)
	cols2=$(($(cat $3 | wc -w)/rows2))
	if [[ $cols1 == $rows2 ]]; then
		multiply $2 $3
	else
		echo "invalid matirx dimensions" >&2
		exit 5
	fi
#default:	
else
	echo 5 >&2
	exit 5
fi
